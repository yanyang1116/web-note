/**
 * https://www.typescriptlang.org/docs/handbook/compiler-options.html
 * 注意，本文件对编译单文件是没用的，比如：
 * "tsc ./src/index.ts"
 * 这样指定目录的编译，是不会读取这个配置文件内容的
 * 只有在针对整个项目的 tsc 或者 babel、webpack 等工具编译过程中才会起作用
 */
{
	/**
	 * 这里 "build/"
	 * 其实是不要编译的，但是就不能共享 typing 里的申明，所以这里要 includes 进来
	 * ts 里的其他情况都是一样的原则
	 */
	"include": ["src/**/*", "build/**/*", "typing/**/*"],
	"compilerOptions": {
		"allowJs": true,
		"jsx": "react-jsx",
		/**
		 * module 与 target 是成对存在
		 * module -> 生成的代码采用什么模块系统来表述引用关系
		 * target -> 生成的代码，模板版本是什么
		 * 正因为如此，官方文档才会有这样的表述:
		 * "CommonJS if target is ES3 or ES5, ES6/ES2015 otherwise."
		 * 这句话的真实意思其实是，target 是 es5、es3 的情况下，module 是不能使用 esm 的
		 *
		 * 这里值得注意的是，生成代码并不代表真正的能够投入环境中 run 了(esm 可以直接在浏览器运行，cjs 可直接在 node 环境运行)
		 * 一般来说需要走额外的编译，才能在浏览器环境下运行
		 *
		 * 这里要 CommonJS + ES5 ，因为最终文件要在 node 下运行
		 */
		// "module": "CommonJS",
		// "target": "ES5",
		/**
		 * https://typescript.bootcss.com/module-resolution.html
		 * https://www.typescriptlang.org/docs/handbook/module-resolution.html
		 * 模块引入方式，详细可以看看，node 是最符合开发直觉的方式
		 * 准确意思是，使用 nodejs 的路径解析规则和方式，来处理代码中的路径关系
		 */
		"moduleResolution": "node",
		/**
		 * https://zhuanlan.zhihu.com/p/148081795
		 * https://www.typescriptlang.org/tsconfig#esModuleInterop
		 * 此处开启为 true，tsc 会增加工具函数，更好的帮助 esm 和 cjs 进行合理的转换
		 * Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility.
		 *
		 * 开启 esModuleInterop 就默认开启了 allowSyntheticDefaultImports，这里 allowSyntheticDefaultImports 注释了
		 * Enabling esModuleInterop will also enable allowSyntheticDefaultImports.
		 */
		"esModuleInterop": true,

		/**
		 * https://www.typescriptlang.org/docs/handbook/compiler-options.html
		 * 这里关心一下 allowSyntheticDefaultImports 的默认值
		 * true if module is system, or esModuleInterop and module is not es6/es2015 or esnext
		 * 第一种 system 不用关心
		 * 第二种就是开启了 esModuleInterop 并且 module 不是 es6/es2015 or esnext 的情况
		 * 如果 module 设置了一些自定义的值，这个 allowSyntheticDefaultImports 还是要手动设置为 true
		 */
		// "allowSyntheticDefaultImports": true,
		"experimentalDecorators": true,
		"lib": ["esnext", "DOM"],

		// 下面这几个是保持良好习惯建议开启的，虽然实际使用中成本可能会很高
		"strictNullChecks": true,
		"noUnusedParameters": true,
		"noUnusedLocals": false, // 是在开发时候调试成本太高了，关闭
		"noImplicitAny": true
	},
	"exclude": ["node_modules"] // 即使排除了 node_modules，@types 下的文件仍然会有作用
}
